# LiveTreinen_AppsScript

## 1. Projectoverzicht
Dit is een Google Apps Script project dat realtime treinposities en -informatie van de NS API ophaalt en visualiseert op een interactieve kaart. De applicatie toont treinen op een OpenStreetMap-kaart met details zoals treinnummer, type, snelheid en vertraging.

## 2. Architectuur
Het project bestaat uit de volgende componenten:
- Backend (Google Apps Script) modulair opgezet voor het ophalen van NS API-gegevens
  - Modules: Main, ApiService, CacheService, ErrorHandler, Config
- Frontend (HTML/JavaScript) voor het weergeven en interactie met treingegevens
- Integratie met Leaflet.js voor kaartvisualisatie

## 3. Modules

### Main.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: Main.js
- **Functionaliteit**: Hoofdmodule die verzoeken afhandelt en coördineert
- **Belangrijkste functies**:
  - `doGet(e)`: Hoofdfunctie die verzoeken verwerkt (HTML pagina of data endpoints)
    - Parameters: e (event object)
    - Return: HTML output of JSON data
    - Afhankelijkheden: ApiService, ErrorHandler

### ApiService.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: ApiService.js
- **Functionaliteit**: Afhandeling van API-communicatie met de NS API
- **Belangrijkste functies**:
  - `getNsApiKey()`: Haalt de NS API-sleutel op uit de script properties
    - Return: API-sleutel of null
  - `makeApiRequest(url, options, resourceName)`: Maakt API-requests met retry-mechanisme
    - Parameters: url (API-endpoint), options (HTTP-options), resourceName (naam voor logging)
    - Return: Response data of foutobject
    - Afhankelijkheden: ErrorHandler, Config
  - `getTreinPosities(trainId)`: Haalt treinposities op van de NS API
    - Parameters: trainId (optioneel, voor filteren op treinnummer)
    - Return: Array met treinposities of foutobject
    - Afhankelijkheden: CacheService, Config
  - `getJourneyDetails(trainNumber)`: Haalt reisinformatie op voor een specifieke trein
    - Parameters: trainNumber (treinnummer)
    - Return: Object met volgende halte en vertragingsinformatie
    - Afhankelijkheden: CacheService, Config

### CacheService.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: CacheService.js
- **Functionaliteit**: Beheert caching voor API-responses
- **Belangrijkste functies**:
  - `getOrFetchData(cacheKey, fetchFunction, expirationSec)`: Haalt data uit cache of via API
    - Parameters: cacheKey (unieke sleutel), fetchFunction (functie om data op te halen), expirationSec (cache-levensduur)
    - Return: Opgevraagde data
    - Afhankelijkheden: ErrorHandler, Config

### ErrorHandler.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: ErrorHandler.js
- **Functionaliteit**: Foutafhandeling en logging
- **Belangrijkste functies**:
  - `logInfo(message)`, `logWarning(message, error)`, `logError(message, error)`: Logging-functies
    - Parameters: message (logbericht), error (optioneel foutobject)
  - `handleApiError(errorType, detailedMessage)`: Standaardiseert API-foutafhandeling
    - Parameters: errorType (fouttype uit ERROR_TYPES), detailedMessage (gedetailleerde foutomschrijving)
    - Return: Gestandaardiseerd foutobject
  - `createErrorResponse(message, statusCode)`: Maakt HTTP-foutantwoord
    - Parameters: message (foutmelding), statusCode (HTTP-statuscode)
    - Return: JSON response met fout

### Config.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: Config.js
- **Functionaliteit**: Centrale configuratiemodule
- **Belangrijkste instellingen**:
  - Cache-levensduur
  - Retry-instellingen
  - API-endpoints
  - Foutdefinities

### Frontend (Index.html)
- **Status**: Verbeterd met betere foutweergave
- **Bestandsnaam**: Index.html
- **Functionaliteit**: Visualiseert treinposities op een kaart en biedt gebruikersinteractie
- **Belangrijkste componenten**:
  - Kaartintegratie met Leaflet.js
  - Zoekfuncties (op treinnummer en locatie)
  - Volgmodus voor specifieke treinen
  - Weergave van treindetails (inclusief vertraging met kleurcodering)
  - Foutafhandeling met visuele status-indicator en error toast
  - Dynamische script ID detectie

### Configuratie
- **Status**: Basis aanwezig
- **Bestandsnaam**: appsscript.json
- **Functionaliteit**: Configuratie voor het Apps Script project

## 4. Status
- ✅ Code.js is opgesplitst in modulaire componenten voor betere onderhoudbaarheid
- ✅ Verbeterde foutafhandeling en logging voor NS API-integratie is geïmplementeerd
- ✅ Verbeterde cache-functionaliteit met specifieke caching per trein/journey is geïmplementeerd
- ✅ API-communicatie is robuuster gemaakt met retry-mechanisme
- Frontend UI is bijgewerkt met verbeterde foutmeldingen en status-indicatoren

## 5. Volgende stappen

### Must-haves:
1. ✅ Verbeteren foutafhandeling en logging voor NS API-integratie (Afgerond in issue #1)
2. ✅ Opsplitsen van Code.js in meerdere modules (Afgerond in issue #2)
3. Toevoegen van informatieve meldingen bij API-fouten
4. Optimaliseren van de code voor betere performance
5. Script ID: Nog niet bekend, moet worden opgevraagd

### Nice-to-haves:
1. Toevoegen van extra treindetails (materieel, vervoerder, etc.)
2. Implementeren van stationszoekfunctie
3. Uitbreiden van filteropties (op type trein, vertraging, etc.)
4. Toevoegen van historische gegevens/tracking
5. Verbeteren van de UI met responsieve elementen
6. Toevoegen van een dashboard met statistieken

Alle must-haves zijn essentieel voor de basiswerking en betrouwbaarheid van de applicatie.
