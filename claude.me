# LiveTreinen_AppsScript

## 1. Projectoverzicht
Dit is een Google Apps Script project dat realtime treinposities en -informatie van de NS API ophaalt en visualiseert op een interactieve kaart. De applicatie toont treinen op een OpenStreetMap-kaart met details zoals treinnummer, type, snelheid en vertraging.

## 2. Architectuur
Het project bestaat uit de volgende componenten:
- Backend (Google Apps Script) modulair opgezet voor het ophalen van NS API-gegevens
  - Modules: Main, ApiService, CacheService, ErrorHandler, Config
- Frontend (HTML/JavaScript) modulair opgezet voor het weergeven en interactie met treingegevens
  - Modules: index, models, api, map, ui, app
- Integratie met Leaflet.js voor kaartvisualisatie

## 3. Modules

### Main.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: Main.js
- **Functionaliteit**: Hoofdmodule die verzoeken afhandelt en coördineert
- **Belangrijkste functies**:
  - `doGet(e)`: Hoofdfunctie die verzoeken verwerkt (HTML pagina of data endpoints)
    - Parameters: e (event object)
    - Return: HTML output of JSON data
    - Afhankelijkheden: ApiService, ErrorHandler

### ApiService.js
- **Status**: Geïmplementeerd en uitgebreid met verbeterde caching
- **Bestandsnaam**: ApiService.js
- **Functionaliteit**: Afhandeling van API-communicatie met de NS API
- **Belangrijkste functies**:
  - `getNsApiKey()`: Haalt de NS API-sleutel op uit de script properties
    - Return: API-sleutel of null
  - `makeApiRequest(url, options, resourceName)`: Maakt API-requests met retry-mechanisme
    - Parameters: url (API-endpoint), options (HTTP-options), resourceName (naam voor logging)
    - Return: Response data of foutobject
    - Afhankelijkheden: ErrorHandler, Config
  - `getTreinPosities(trainId)`: Haalt treinposities op van de NS API
    - Parameters: trainId (optioneel, voor filteren op treinnummer)
    - Return: Array met treinposities of foutobject
    - Afhankelijkheden: CacheService, Config
  - `getJourneyDetails(trainNumber)`: Haalt reisinformatie op voor een specifieke trein
    - Parameters: trainNumber (treinnummer)
    - Return: Object met volgende halte en vertragingsinformatie
    - Afhankelijkheden: CacheService, Config
  - `getCacheStatistics()`: Haalt cachestatistieken op voor monitoring
    - Return: Statistieken over cache-gebruik
  - `resetCacheStatistics()`: Reset cache statistieken
    - Return: Resultaat van de reset
  - `refreshTrainData(trainNumber)`: Forceert het verversen van data voor een specifieke trein
    - Parameters: trainNumber (treinnummer om te verversen)
    - Return: Resultaat van de operatie

### CacheService.js
- **Status**: Geïmplementeerd en uitgebreid met geavanceerde functionaliteit
- **Bestandsnaam**: CacheService.js
- **Functionaliteit**: Beheert caching voor API-responses
- **Belangrijkste functies**:
  - `getOrFetchData(cacheKey, fetchFunction, expirationSec)`: Haalt data uit cache of via API
    - Parameters: cacheKey (unieke sleutel), fetchFunction (functie om data op te halen), expirationSec (cache-levensduur)
    - Return: Opgevraagde data
    - Afhankelijkheden: ErrorHandler, Config
  - `buildCacheKey(prefix, key, params)`: Bouwt consistente cache-sleutels
    - Parameters: prefix (type prefix), key (basissleutel), params (optionele parameters)
    - Return: Volledige cache-sleutel
  - `getCacheStats()`: Haalt cache-statistieken op
    - Return: Object met cache hit/miss statistieken
  - `resetCacheStats()`: Reset cache-statistieken
    - Return: Status-object
  - `invalidateCache(cacheKey)`: Invalideert een specifieke cache-entry
    - Parameters: cacheKey (te invalideren sleutel)
    - Return: Status-object
  - `hasFreshCache(trainNumber)`: Controleert of er recente cache is voor een trein
    - Parameters: trainNumber (te controleren treinnummer)
    - Return: Boolean die aangeeft of cache beschikbaar is

### ErrorHandler.js
- **Status**: Geïmplementeerd
- **Bestandsnaam**: ErrorHandler.js
- **Functionaliteit**: Foutafhandeling en logging
- **Belangrijkste functies**:
  - `logInfo(message)`, `logWarning(message, error)`, `logError(message, error)`: Logging-functies
    - Parameters: message (logbericht), error (optioneel foutobject)
  - `handleApiError(errorType, detailedMessage)`: Standaardiseert API-foutafhandeling
    - Parameters: errorType (fouttype uit ERROR_TYPES), detailedMessage (gedetailleerde foutomschrijving)
    - Return: Gestandaardiseerd foutobject
  - `createErrorResponse(message, statusCode)`: Maakt HTTP-foutantwoord
    - Parameters: message (foutmelding), statusCode (HTTP-statuscode)
    - Return: JSON response met fout

### Config.js
- **Status**: Geïmplementeerd en uitgebreid met gedetailleerde cache-instellingen
- **Bestandsnaam**: Config.js
- **Functionaliteit**: Centrale configuratiemodule
- **Belangrijkste instellingen**:
  - Gedifferentieerde cache-levensduur (TTL) per datatype
  - Cache-sleutel prefixes voor verschillende data types
  - Retry-instellingen
  - API-endpoints
  - Foutdefinities

### Frontend (Index.html)
- **Status**: Geïmplementeerd met modulair ontwerp en opgesplitst in componenten
- **Bestandsnamen**:
  - `index.html` - Hoofdbestand met basisstructuur en imports
  - `frontend/css/main.html` - Hoofdstylesheet
  - `frontend/js/models.html` - Data models en transformaties
  - `frontend/js/api.html` - API communicatie en data fetching
  - `frontend/js/map.html` - Kaartgerelateerde functionaliteit 
  - `frontend/js/ui.html` - UI componenten en interacties
  - `frontend/js/app.html` - Applicatie entry point en controller
- **Functionaliteit**: Visualiseert treinposities op een kaart en biedt gebruikersinteractie
- **Belangrijkste componenten**:
  - Kaartintegratie met Leaflet.js
  - Zoekfuncties (op treinnummer en locatie)
  - Volgmodus voor specifieke treinen
  - Weergave van treindetails (inclusief vertraging met kleurcodering)
  - Foutafhandeling met visuele status-indicator en error toast
  - Dynamische script ID detectie
  - Cache-statistiekenpaneel
  - Data-bron indicatoren (live vs. cached)
  - Handmatige ververs-functionaliteit voor cache-items

### Configuratie
- **Status**: Geïmplementeerd
- **Bestandsnaam**: appsscript.json
- **Functionaliteit**: Configuratie voor het Apps Script project

## 4. Status
- ✅ Code.js is opgesplitst in modulaire componenten voor betere onderhoudbaarheid
- ✅ Verbeterde foutafhandeling en logging voor NS API-integratie is geïmplementeerd
- ✅ Verbeterde cache-functionaliteit met specifieke caching per trein/journey is geïmplementeerd
- ✅ API-communicatie is robuuster gemaakt met retry-mechanisme
- ✅ Documentation toegevoegd (ARCHITECTURE.md, DEPLOYMENT.md, voorbeelden)
- ✅ Frontend UI is bijgewerkt met verbeterde foutmeldingen en status-indicatoren
- ✅ Geavanceerde cache-strategieën met gedifferentieerde TTL's geïmplementeerd
- ✅ Cache-statistieken en monitoring toegevoegd
- ✅ Frontend code is opgesplitst in modulaire componenten
- ✅ Deployment documentatie en instructies toegevoegd

## 5. Volgende stappen

### Must-haves:
1. ✅ Verbeteren foutafhandeling en logging voor NS API-integratie (Afgerond in issue #1)
2. ✅ Opsplitsen van Code.js in meerdere modules (Afgerond in issue #5)
3. ✅ Documenteren van de nieuwe modulaire codestructuur (Afgerond in issue #4)
4. ✅ Uitbreiden van de cache-functionaliteit voor betere performance (Afgerond in issue #2)
5. ✅ Opsplitsen van Index.html in modulaire frontend-componenten (Afgerond in issue #6)
6. ✅ Plaatsen van de code naar Apps Script project en deployment (Afgerond in issue #7)
7. Script ID: AKfycbyGbGRas6dTNB8aFcv7Z62kNpq6RRdEanjkrvXXX9rHihmFV-Wy-oBrM_GqXbN0FNgP

### Nice-to-haves:
1. Implementeren van modulaire code-bundling voor Apps Script deployment (Issue #3)
2. Toevoegen van extra treindetails (materieel, vervoerder, etc.)
3. Implementeren van stationszoekfunctie
4. Uitbreiden van filteropties (op type trein, vertraging, etc.)
5. Toevoegen van historische gegevens/tracking
6. Verbeteren van de UI met responsieve elementen
7. Toevoegen van een dashboard met statistieken

Alle must-have functies voor de basiswerking van de applicatie zijn voltooid, inclusief het documenteren van de deployment procedure naar het Apps Script project (issue #7). De resterende taken zijn nice-to-have verbeteringen en uitbreidingen die de functionaliteit en gebruikerservaring kunnen verbeteren, maar niet noodzakelijk zijn voor de kernfunctionaliteit.